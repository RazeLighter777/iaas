---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/refs/heads/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
  namespace: media
spec:
  dependsOn:
    - name: cloudnative-database-media
      namespace: media
  interval: 5m
  chart:
    spec:
      version: 3.7.3
      chart: app-template
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
      interval: 5m
  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace
  test:
    enable: true
  rollback:
    recreate: true
    force: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  driftDetection:
    mode: enabled
  maxHistory: 3
  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"
        strategy: Recreate
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.4.0@sha256:a9f405688344a8a6f718e2c344438342ad21540986aeb5ab5fa781831eb2c597
            env:
              - name: INIT_POSTGRES_DBNAME
                value: radarr_main radarr_log
              - name: INIT_POSTGRES_HOST
                value: &dbhost cloudnative-database-media-cluster-rw
              - name: INIT_POSTGRES_SUPER_PASS
                valueFrom:
                  secretKeyRef:
                    name: cloudnative-database-media-cluster-superuser
                    key: password
              - name: INIT_POSTGRES_USER
                value: &dbuser radarr
              - name: INIT_POSTGRES_PASS
                valueFrom:
                  secretKeyRef:
                    name: cloudnative-database-media-cluster-app
                    key: password
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/radarr
              # renovate: datasource=github-releases depName=home-operations/radarr
              tag: 5.23.1.9914@sha256:794fb31c2773491429cdf50906443c301c61298b1e53f1e95ccf723c30c73d3f
            env:
                - name: RADARR__APP__INSTANCENAME
                  value: ${domain_name} Radarr
                - name: RADARR__APP__THEME
                  value: dark
                - name: RADARR__AUTH__METHOD
                  value: External
                - name: RADARR__AUTH__REQUIRED
                  value: DisabledForLocalAddresses
                - name: RADARR__LOG__DBENABLED
                  value: "True"
                - name: RADARR__LOG__LEVEL
                  value: info
                - name: RADARR__SERVER__PORT
                  value: &port 8989
                - name: RADARR__UPDATE__BRANCH
                  value: develop
                - name: RADARR__POSTGRES__HOST
                  value: *dbhost
                - name: RADARR__POSTGRES__PORT
                  value: "5432"
                - name: RADARR__POSTGRES__USER
                  value: *dbuser
                - name: RADARR__POSTGRES__PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: cloudnative-database-media-cluster-app
                      key: password
                - name: RADARR__POSTGRES__MAINDB
                  value: radarr_main
                - name: RADARR__POSTGRES__LOGDB
                  value: radarr_log
                - name: TZ
                  value: ${timezone}    
            envFrom:
              - secretRef:
                  name: radarr
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 4Gi
          exporter:
            image:
              repository: ghcr.io/onedr0p/exportarr
              tag: v2.2.0@sha256:320b0ea7399f4b9af4741dcdddd7d40c05c36b0359679305d8a54df4e97065df 
            args:
              - *app
            env:
              URL: "http://localhost:8989"
              #CONFIG: /config/config.xml
              PORT: &metrics-port 9794
              ENABLE_ADDITIONAL_METRICS: true
              ENABLE_UNKNOWN_QUEUE_ITEMS: true
              # APIKEY: load from valuesFrom
            ports:
              - name: metrics
                containerPort: *metrics-port
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
     
    service:
      app:
        controller: radarr
        ports:
          http:
            port: *port
          metrics:
            port: *metrics-port
    serviceMonitor:
      app:
        enabled: true
        serviceName: radarr
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 30s
            scrapeTimeout: 10s
    persistence:
      config:
        enabled: true
        storageClass: longhorn-fast
        size: 100Mi
        accessMode: ReadWriteOnce
        globalMounts:
          - path: /config
      cache:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /config/MediaCover
      tmp:
        type: emptyDir
      media:
        enabled: true
        existingClaim: media
        advancedMounts:
          radarr:
            app:
              - path: /media/
                readOnly: false #radarr needs write access to the media folder
    ingress:
      app:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/auth-url: |-
              http://ak-outpost-proxy-outpost.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
              https://radarr.${domain_name}/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: |-
              Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |
              proxy_set_header X-Forwarded-Host $http_host;
        className: nginx
        hosts:
          - host: radarr.${domain_name}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: *port
  valuesFrom:
    - kind: Secret
      name: radarr
      valuesKey: RADARR__AUTH__APIKEY
      targetPath: controllers.radarr.containers.exporter.env.APIKEY